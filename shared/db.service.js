"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/operator/catch");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var DbService = /** @class */ (function () {
    function DbService(http) {
        this.http = http;
        this.apiUrl = "http://maintek.azurewebsites.net/api/";
        this.appKey = "";
        this.authHeader = "";
    }
    DbService.prototype.getCommonHeaders = function () {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        headers.append("Authorization", this.authHeader);
        return headers;
    };
    DbService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error.json()));
        return Observable_1.Observable.throw(error);
    };
    //###############################
    // USER
    //###############################
    DbService.prototype.getUser = function (id) {
        return this.http.post(this.apiUrl + "user/Get" + this.appKey, JSON.stringify({
            use_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.addUser = function (user, pwd, share) {
        return this.http.post(this.apiUrl + "user/Add" + this.appKey, JSON.stringify({
            prm_name: user,
            prm_pwd: pwd,
            prm_share: share
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.removeUser = function (id) {
        return this.http.post(this.apiUrl + "user/Remove" + this.appKey, JSON.stringify({
            use_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.checkUser = function (user, pwd) {
        return this.http.post(this.apiUrl + "user/Check" + this.appKey, JSON.stringify({
            user: user,
            pwd: pwd
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.setUserImg = function (id, img) {
        return this.http.post(this.apiUrl + "user/SetImg" + this.appKey, JSON.stringify({
            prm_id: id,
            prm_img: img
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.setUserName = function (id, name) {
        return this.http.post(this.apiUrl + "user/SetName" + this.appKey, JSON.stringify({
            prm_id: id,
            prm_name: name
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.setUserShare = function (id, share) {
        return this.http.post(this.apiUrl + "user/SetShare" + this.appKey, JSON.stringify({
            prm_id: id,
            prm_share: share
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    //###############################
    // FICHE
    //###############################
    DbService.prototype.getFiche = function (id) {
        return this.http.post(this.apiUrl + "fiche/Get" + this.appKey, JSON.stringify({
            fic_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.addFiche = function (titre, url, mediatek) {
        return this.http.post(this.apiUrl + "fiche/Add" + this.appKey, JSON.stringify({
            prm_titre: titre,
            prm_url: url,
            prm_mediatek: mediatek
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.removeFiche = function (id) {
        return this.http.post(this.apiUrl + "fiche/Remove" + this.appKey, JSON.stringify({
            fic_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    //###############################
    // MEDIATEK
    //###############################
    DbService.prototype.getMediatek = function (id) {
        return this.http.post(this.apiUrl + "mediatek/Get" + this.appKey, JSON.stringify({
            mediatek_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.getMediatekFiches = function (id) {
        return this.http.post(this.apiUrl + "mediatek/GetFiche" + this.appKey, JSON.stringify({
            mediatek_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.mediatekAddFiche = function (med_id, fic_id) {
        return this.http.post(this.apiUrl + "mediatek/AddFiche" + this.appKey, JSON.stringify({
            mediatek_id: med_id,
            fic_id: fic_id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.mediatekRemoveFiche = function (med_id, fic_id) {
        return this.http.post(this.apiUrl + "mediatek/RemoveFiche" + this.appKey, JSON.stringify({
            mediatek_id: med_id,
            fic_id: fic_id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    //###############################
    // GROUPE
    //###############################
    DbService.prototype.getGroupe = function (id) {
        return this.http.post(this.apiUrl + "groupe/Get" + this.appKey, JSON.stringify({
            gro_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.getGroupeUsers = function (id) {
        return this.http.post(this.apiUrl + "groupe/GetUsers" + this.appKey, JSON.stringify({
            gro_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.userGetGroupes = function (id) {
        return this.http.post(this.apiUrl + "groupe/UserGetGroupes" + this.appKey, JSON.stringify({
            use_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.setGroupeImg = function (id, img) {
        return this.http.post(this.apiUrl + "groupe/SetImg" + this.appKey, JSON.stringify({
            gro_id: id,
            prm_img: img
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.setGroupeName = function (id, name) {
        return this.http.post(this.apiUrl + "groupe/SetName" + this.appKey, JSON.stringify({
            gro_id: id,
            prm_name: name
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.setGroupeShare = function (id, share) {
        return this.http.post(this.apiUrl + "groupe/SetShare" + this.appKey, JSON.stringify({
            gro_id: id,
            prm_share: share
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.groupeAddUser = function (gro_id, use_id) {
        return this.http.post(this.apiUrl + "groupe/AddUser" + this.appKey, JSON.stringify({
            gro_id: gro_id,
            use_id: use_id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.groupeRemoveUser = function (gro_id, use_id) {
        return this.http.post(this.apiUrl + "groupe/RemoveUser" + this.appKey, JSON.stringify({
            gro_id: gro_id,
            use_id: use_id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.removeGroupe = function (id) {
        return this.http.post(this.apiUrl + "groupe/Remove" + this.appKey, JSON.stringify({
            gro_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    //###############################
    // NOTES
    //###############################
    DbService.prototype.getNotes = function (id) {
        return this.http.post(this.apiUrl + "note/Get" + this.appKey, JSON.stringify({
            fic_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.addNote = function (use_id, fic_id, note) {
        return this.http.post(this.apiUrl + "note/Add" + this.appKey, JSON.stringify({
            use_id: use_id,
            fic_id: fic_id,
            prm_note: note
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.setNote = function (id, note) {
        return this.http.post(this.apiUrl + "note/Set" + this.appKey, JSON.stringify({
            not_id: id,
            prm_note: note
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    //###############################
    // AVIS
    //###############################
    DbService.prototype.getAvis = function (id) {
        return this.http.post(this.apiUrl + "avis/Get" + this.appKey, JSON.stringify({
            fic_id: id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.addAvis = function (use_id, fic_id, avis) {
        return this.http.post(this.apiUrl + "avis/Add" + this.appKey, JSON.stringify({
            use_id: use_id,
            fic_id: fic_id,
            prm_avis: avis
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.setAvis = function (id, avis) {
        return this.http.post(this.apiUrl + "note/Set" + this.appKey, JSON.stringify({
            not_id: id,
            prm_avis: avis
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    //###############################
    // Visionner
    //###############################
    DbService.prototype.getVisionner = function (use_id, fic_id) {
        return this.http.post(this.apiUrl + "visionner/Get" + this.appKey, JSON.stringify({
            use_id: use_id,
            fic_id: fic_id
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.addVisionner = function (use_id, fic_id) {
        return this.http.post(this.apiUrl + "visionner/Add" + this.appKey, JSON.stringify({
            use_id: use_id,
            fic_id: fic_id,
            prm_status: 0
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.setVisionner = function (use_id, fic_id, status) {
        return this.http.post(this.apiUrl + "visionner/Set" + this.appKey, JSON.stringify({
            use_id: use_id,
            fic_id: fic_id,
            prm_status: status
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    //###############################
    // OMDB
    //###############################
    DbService.prototype.omdbSearch = function (search) {
        return this.http.post(this.apiUrl + "Omdb/Search" + this.appKey, JSON.stringify({
            titre: search
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService.prototype.omdbGet = function (name) {
        return this.http.post(this.apiUrl + "Omdb/Get" + this.appKey, JSON.stringify({
            titre: name
        }), { headers: this.getCommonHeaders() })
            .catch(this.handleErrors);
    };
    DbService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http])
    ], DbService);
    return DbService;
}());
exports.DbService = DbService;
//# sourceMappingURL=data:application/json;base64,